#!/usr/bin/env node

import fetch from 'node-fetch';

/**
 * üéØ DONN√âES TEMPS R√âEL AVEC PROXIES IPROYAL + FLARESOLVERR - GMGN.AI
 * 
 * Solution finale combinant :
 * ‚úÖ FlareSolverr pour contourner Cloudflare GMGN
 * ‚úÖ Proxies IPRoyal avec rotation pour √©viter les limitations
 * ‚úÖ Diagnostic confirm√© : proxies IPRoyal fonctionnels
 */

const TARGET_TOKEN = '5umKhqeUvXWhs1vusXkf6CbZLvHbDt3bHZGQez7vpump'; // chat
const UPDATE_INTERVAL = 2000; // 2000ms = 2 secondes (FlareSolverr est plus lent)

// ‚≠ê Configuration IPRoyal (valid√©e par diagnostic)
const IPROYAL_CONFIG = {
    hostname: 'geo.iproyal.com',
    port: '12321',
    username: 'j686absSWTWSkmcj',
    password: 'kjXBVH6xcLmWKew5'
};

// üîÑ Pays pour rotation automatique (test√©s et fonctionnels)
const COUNTRIES = ['US', 'CA', 'GB', 'DE', 'FR'];
let currentCountryIndex = 0;

// Variables de suivi
let lastPrice = null;
let lastData = null;
let updateCount = 0;
let errorCount = 0;
let startTime = Date.now();
let currentProxy = null;

console.log('üéØ SOLUTION FINALE : FLARESOLVERR + PROXIES IPROYAL');
console.log('‚ïê'.repeat(75));
console.log(`ü™ô Token: ${TARGET_TOKEN}`);
console.log(`‚è±Ô∏è Mise √† jour: toutes les ${UPDATE_INTERVAL/1000} seconde(s)`);
console.log(`üîó Source: GMGN.ai via FlareSolverr`);
console.log(`üåê Proxy: IPRoyal R√©sidentiel avec rotation IP`);
console.log(`‚úÖ Fr√©quence s√©curis√©e: ${(1000/UPDATE_INTERVAL).toFixed(2)} req/sec`);
console.log('üöÄ D√©marrage...\n');

/**
 * üåê Obtenir le prochain proxy avec rotation de pays
 */
function getNextProxy() {
    const country = COUNTRIES[currentCountryIndex];
    currentCountryIndex = (currentCountryIndex + 1) % COUNTRIES.length;
    
    // ‚úÖ Format valid√© par diagnostic
    const username = IPROYAL_CONFIG.username;
    const password = `${IPROYAL_CONFIG.password}_country-${country.toLowerCase()}`;
    const proxyUrl = `http://${username}:${password}@${IPROYAL_CONFIG.hostname}:${IPROYAL_CONFIG.port}`;
    
    currentProxy = {
        url: proxyUrl,
        country: country
    };
    
    return currentProxy;
}

/**
 * üì° R√©cup√©rer donn√©es GMGN via FlareSolverr + IPRoyal
 */
async function fetchTokenData() {
    try {
        const url = `https://gmgn.ai/defi/quotation/v1/tokens/sol/${TARGET_TOKEN}`;
        
        // Obtenir le prochain proxy
        const proxy = getNextProxy();
        
        // üî• FlareSolverr avec proxy IPRoyal
        const payload = {
            cmd: "request.get",
            url: url,
            maxTimeout: 60000,
            proxy: {
                url: proxy.url
            },
            headers: {
                'Accept': 'application/json, text/plain, */*',
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': `https://www.gmgn.cc/sol/${TARGET_TOKEN}`,
                'Origin': 'https://www.gmgn.cc'
            }
        };
        
        const response = await fetch('http://localhost:8191/v1', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
            throw new Error(`FlareSolverr HTTP ${response.status} via ${proxy.country}`);
        }
        
        const result = await response.json();
        
        if (result.status !== 'ok') {
            throw new Error(`FlareSolverr failed: ${result.message} via ${proxy.country}`);
        }
        
        // Traiter la r√©ponse
        let data;
        try {
            data = JSON.parse(result.solution.response);
        } catch (parseError) {
            // Diagnostic am√©lior√©
            const responsePreview = result.solution.response.substring(0, 100);
            if (result.solution.response.includes('<!DOCTYPE html>')) {
                throw new Error(`GMGN retourne HTML (Cloudflare actif?) via ${proxy.country}`);
            }
            throw new Error(`JSON parsing error via ${proxy.country}: ${responsePreview}...`);
        }
        
        if (!data || typeof data.price === 'undefined') {
            throw new Error(`Pas de donn√©es de prix via ${proxy.country}`);
        }
        
        return {
            ...data,
            timestamp: Date.now(),
            proxyUsed: `FlareSolverr+IPRoyal-${proxy.country}`,
            proxyUrl: proxy.url.replace(IPROYAL_CONFIG.password, '***')
        };
        
    } catch (error) {
        throw new Error(`${error.message} [Proxy: ${currentProxy?.country || 'N/A'}]`);
    }
}

/**
 * üí∞ Formater une valeur
 */
function formatValue(value, type = 'default') {
    if (value === null || value === undefined) return 'N/A';
    
    switch (type) {
        case 'price':
            return `$${Number(value).toFixed(8)}`;
        case 'marketcap':
        case 'volume':
            if (value >= 1e9) return `$${(value / 1e9).toFixed(2)}B`;
            if (value >= 1e6) return `$${(value / 1e6).toFixed(2)}M`;
            if (value >= 1e3) return `$${(value / 1e3).toFixed(2)}K`;
            return `$${Number(value).toFixed(2)}`;
        case 'percentage':
            return `${Number(value).toFixed(4)}%`;
        case 'number':
            return Number(value).toLocaleString();
        case 'timestamp':
            return new Date(value * 1000).toLocaleString('fr-FR');
        default:
            return String(value);
    }
}

/**
 * üìä Afficher les donn√©es
 */
function displayTokenData(tokenData) {
    updateCount++;
    const time = new Date().toLocaleTimeString('fr-FR', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit', 
        second: '2-digit' 
    });
    
    const price = tokenData.price;
    let changeIcon = '‚ö™';
    let priceChangeInfo = '';
    
    // Calcul du changement de prix
    if (lastPrice !== null) {
        const change = price - lastPrice;
        const changePercent = ((change / lastPrice) * 100);
        
        if (Math.abs(changePercent) > 0.001) {
            changeIcon = change >= 0 ? 'üü¢' : 'üî¥';
            const changeStr = change >= 0 ? `+${change.toFixed(10)}` : change.toFixed(10);
            const percentStr = change >= 0 ? `+${changePercent.toFixed(4)}%` : `${changePercent.toFixed(4)}%`;
            priceChangeInfo = ` (${changeStr} | ${percentStr})`;
        }
    }
    
    // Affichage compact avec info proxy
    console.log(`${changeIcon} [${time}] ${formatValue(price, 'price')}${priceChangeInfo} [${tokenData.proxyUsed}]`);
    
    // D√©tails p√©riodiques
    const shouldShowDetails = (lastData === null) || 
                             (updateCount % 5 === 0) || 
                             (lastPrice && Math.abs((price - lastPrice) / lastPrice) > 0.005);
    
    if (shouldShowDetails) {
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ üìä DONN√âES COMPL√àTES (FlareSolverr+IPRoyal)                               ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        
        if (tokenData.symbol) console.log(`‚îÇ üè∑Ô∏è  Symbole: ${tokenData.symbol.padEnd(66)} ‚îÇ`);
        if (tokenData.name) console.log(`‚îÇ üìõ Nom: ${tokenData.name.padEnd(70)} ‚îÇ`);
        console.log(`‚îÇ üí∞ Prix: ${formatValue(price, 'price').padEnd(69)} ‚îÇ`);
        
        if (tokenData.market_cap) console.log(`‚îÇ üìà Market Cap: ${formatValue(tokenData.market_cap, 'marketcap').padEnd(62)} ‚îÇ`);
        if (tokenData.volume_24h) console.log(`‚îÇ üìä Volume 24h: ${formatValue(tokenData.volume_24h, 'volume').padEnd(62)} ‚îÇ`);
        if (tokenData.liquidity) console.log(`‚îÇ üíß Liquidit√©: ${formatValue(tokenData.liquidity, 'marketcap').padEnd(63)} ‚îÇ`);
        if (tokenData.holder_count) console.log(`‚îÇ üë• Holders: ${formatValue(tokenData.holder_count, 'number').padEnd(65)} ‚îÇ`);
        
        console.log(`‚îÇ üåê Proxy actuel: ${tokenData.proxyUsed.padEnd(60)} ‚îÇ`);
        console.log(`‚îÇ üîÑ Rotation: ${COUNTRIES.length} pays (${COUNTRIES.join(', ')})${' '.padEnd(30)} ‚îÇ`);
        
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');
    }
    
    lastPrice = price;
    lastData = tokenData;
}

/**
 * üìä Statistiques
 */
function showStats() {
    const runTime = Math.floor((Date.now() - startTime) / 1000);
    const successRate = updateCount > 0 ? ((updateCount / (updateCount + errorCount)) * 100).toFixed(1) : '0';
    const avgReqPerSec = updateCount > 0 ? (updateCount / runTime).toFixed(2) : '0';
    
    console.log(`\nüìä [Stats] Dur√©e: ${runTime}s | Updates: ${updateCount} | Erreurs: ${errorCount} | Succ√®s: ${successRate}%`);
    console.log(`‚ö° [Performance] Vitesse: ${avgReqPerSec} req/sec | Proxy: ${currentProxy?.country || 'N/A'}`);
    console.log(`üåê [Proxies] ${COUNTRIES.length} pays disponibles avec rotation automatique`);
    if (lastPrice) {
        console.log(`üí∞ [Prix actuel] ${formatValue(lastPrice, 'price')}`);
    }
    console.log('');
}

/**
 * üîÑ Boucle principale
 */
async function dataLoop() {
    try {
        const tokenData = await fetchTokenData();
        displayTokenData(tokenData);
        
    } catch (error) {
        errorCount++;
        const time = new Date().toLocaleTimeString('fr-FR', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
        });
        console.log(`‚ùå [${time}] ${error.message}`);
        
        // Pause apr√®s erreurs multiples
        if (errorCount > 0 && errorCount % 3 === 0) {
            console.log(`‚è∏Ô∏è Pause de 5s apr√®s ${errorCount} erreurs...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
    }
}

/**
 * üöÄ D√©marrage
 */
async function start() {
    console.log('‚úÖ Configuration FlareSolverr + IPRoyal initialis√©e');
    console.log(`üåê Pool de proxies: ${COUNTRIES.length} pays valid√©s par diagnostic`);
    console.log(`üî• FlareSolverr: http://localhost:8191 (doit √™tre d√©marr√©)`);
    
    // Premier appel
    await dataLoop();
    
    // Intervalle r√©gulier
    const interval = setInterval(dataLoop, UPDATE_INTERVAL);
    
    // Stats toutes les 60 secondes
    const statsInterval = setInterval(showStats, 60000);
    
    // Gestion Ctrl+C
    process.on('SIGINT', () => {
        console.log('\nüõë Arr√™t en cours...');
        
        clearInterval(interval);
        clearInterval(statsInterval);
        
        const runTime = Math.floor((Date.now() - startTime) / 1000);
        console.log('\nüìä R√âSUM√â FINAL:');
        console.log(`  ‚è±Ô∏è Dur√©e: ${runTime} secondes`);
        console.log(`  üìà Succ√®s: ${updateCount} | ‚ùå Erreurs: ${errorCount}`);
        console.log(`  üåê Pays utilis√©s: ${COUNTRIES.join(', ')}`);
        
        if (updateCount > 0) {
            const successRate = ((updateCount / (updateCount + errorCount)) * 100).toFixed(1);
            const avgReqPerSec = (updateCount / runTime).toFixed(2);
            console.log(`  ‚úÖ Taux de succ√®s: ${successRate}%`);
            console.log(`  ‚ö° Vitesse: ${avgReqPerSec} req/sec`);
        }
        
        if (lastPrice) {
            console.log(`  üí∞ Dernier prix: ${formatValue(lastPrice, 'price')}`);
        }
        
        console.log('\n‚úÖ Monitoring arr√™t√©!');
        process.exit(0);
    });
    
    console.log('üí° Appuyez sur Ctrl+C pour arr√™ter');
    console.log('üìä Stats automatiques toutes les 60 secondes');
    console.log(`‚ö° Solution finale : FlareSolverr contourne Cloudflare + IPRoyal √©vite les limitations`);
}

// D√©marrage
start().catch(error => {
    console.error('‚ùå Erreur fatale:', error.message);
    process.exit(1);
}); 