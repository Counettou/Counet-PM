#!/usr/bin/env node

/**
 * üß™ SCRIPT DE TEST - CALCUL DE PRIX HELIUS
 * 
 * Valide le calcul de prix en temps r√©el depuis le WebSocket Helius
 * Compare avec DexScreener et Jupiter pour v√©rifier la pr√©cision
 */

import HeliusWebSocketPriceService from './src/helius_websocket_price_service.js';

class HeliusPriceCalculationTester {
    constructor() {
        this.heliusService = new HeliusWebSocketPriceService();
        this.testTokens = [
            'DFfPq2hHbJeunp1F6eNyuyvBHcPpnTqaawn2tAFUpump', // KITTY
            '5umKhqeUQYLWGgWRPzYu3WdJfSwqShvGxBzpR6uH6x2r'  // chat
        ];
        
        this.testResults = {
            totalUpdates: 0,
            heliusCalculated: 0,
            dexScreenerFallbacks: 0,
            priceVariations: [],
            errors: []
        };
        
        this.referencePrice = new Map();
        this.lastHeliusPrice = new Map();
        
        console.log('üß™ Initialisation du testeur de calcul de prix Helius');
        console.log(`üìã Tokens de test: ${this.testTokens.length}`);
    }

    /**
     * D√©marrer les tests
     */
    async startTests() {
        console.log('\nüöÄ D√âMARRAGE DES TESTS DE CALCUL DE PRIX');
        console.log('‚ïê'.repeat(60));
        
        // D√©marrer le service Helius
        await this.heliusService.start();
        
        // Ajouter les tokens de test
        for (const mint of this.testTokens) {
            await this.heliusService.addToken(mint);
        }
        
        // R√©cup√©rer les prix de r√©f√©rence
        await this.fetchReferencePrices();
        
        // √âcouter les mises √† jour de prix
        this.heliusService.on('priceUpdate', (priceData) => {
            this.handlePriceUpdate(priceData);
        });
        
        // Lancer les tests p√©riodiques
        this.startPeriodicTests();
        
        console.log('\n‚úÖ Tests d√©marr√©s - Surveillance en cours...');
        console.log('üîç Validation: Calcul Helius vs Prix de r√©f√©rence');
        console.log('‚è±Ô∏è  Rapport de test toutes les 30 secondes');
    }

    /**
     * R√©cup√©rer les prix de r√©f√©rence (DexScreener)
     */
    async fetchReferencePrices() {
        console.log('\nüìä R√©cup√©ration des prix de r√©f√©rence...');
        
        for (const mint of this.testTokens) {
            try {
                const price = await this.heliusService.getDexScreenerPrice(mint);
                if (price) {
                    this.referencePrice.set(mint, price);
                    const symbol = this.heliusService.getTokenSymbol(mint) || mint.substring(0, 8);
                    console.log(`üìå ${symbol}: $${price.toFixed(8)} (r√©f√©rence DexScreener)`);
                }
            } catch (error) {
                console.error(`‚ùå Erreur prix r√©f√©rence ${mint}:`, error.message);
            }
        }
    }

    /**
     * Traiter une mise √† jour de prix
     */
    handlePriceUpdate(priceData) {
        const { mint, price, source, slot } = priceData;
        this.testResults.totalUpdates++;
        
        const symbol = this.heliusService.getTokenSymbol(mint) || mint.substring(0, 8);
        const refPrice = this.referencePrice.get(mint);
        
        if (source === 'helius_realtime') {
            this.testResults.heliusCalculated++;
            this.lastHeliusPrice.set(mint, price);
            
            // Calculer la variation par rapport √† la r√©f√©rence
            if (refPrice) {
                const variation = ((price - refPrice) / refPrice) * 100;
                this.testResults.priceVariations.push({
                    mint,
                    symbol,
                    heliusPrice: price,
                    referencePrice: refPrice,
                    variation: variation,
                    slot: slot,
                    timestamp: Date.now()
                });
                
                // Affichage simple sur une ligne
                const variationIcon = Math.abs(variation) < 0.5 ? 'üü¢' : Math.abs(variation) < 1 ? 'üü°' : 'üî¥';
                const time = new Date().toLocaleTimeString();
                console.log(`${time} | ${symbol.padEnd(6)} | $${price.toFixed(8)} | Œî${variation.toFixed(2)}% ${variationIcon}`);
            }
        } else {
            this.testResults.dexScreenerFallbacks++;
            // Logs fallback moins verbeux
            if (this.testResults.dexScreenerFallbacks % 10 === 1) {
                console.log(`üîÑ ${symbol}: Fallback DexScreener $${price.toFixed(8)}`);
            }
        }
        
        // Affichage du tableau des 2 tokens toutes les 5 mises √† jour
        if (this.testResults.totalUpdates % 5 === 0) {
            this.displayTokensTable();
        }
    }

    /**
     * Afficher le tableau des 2 tokens
     */
    displayTokensTable() {
        console.log('\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ               üöÄ HELIUS PRICING                ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        console.log('‚îÇ TOKEN   ‚îÇ HELIUS      ‚îÇ R√âF√âRENCE   ‚îÇ VARIATION‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        
        for (const mint of this.testTokens) {
            const symbol = this.heliusService.getTokenSymbol(mint) || mint.substring(0, 6);
            const heliusPrice = this.lastHeliusPrice.get(mint);
            const refPrice = this.referencePrice.get(mint);
            
            let heliusStr = 'N/A';
            let refStr = 'N/A';
            let variationStr = 'N/A';
            
            if (heliusPrice) {
                heliusStr = `$${heliusPrice.toFixed(8)}`;
            }
            if (refPrice) {
                refStr = `$${refPrice.toFixed(8)}`;
            }
            if (heliusPrice && refPrice) {
                const variation = ((heliusPrice - refPrice) / refPrice) * 100;
                const icon = Math.abs(variation) < 0.5 ? 'üü¢' : Math.abs(variation) < 1 ? 'üü°' : 'üî¥';
                variationStr = `${variation.toFixed(2)}% ${icon}`;
            }
            
            console.log(`‚îÇ ${symbol.padEnd(7)} ‚îÇ ${heliusStr.padEnd(11)} ‚îÇ ${refStr.padEnd(11)} ‚îÇ ${variationStr.padEnd(8)} ‚îÇ`);
        }
        
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        console.log(`üìä Updates: ${this.testResults.totalUpdates} | Calculs: ${this.testResults.heliusCalculated} | Fallbacks: ${this.testResults.dexScreenerFallbacks}\n`);
    }

    /**
     * Tests p√©riodiques
     */
    startPeriodicTests() {
        // Affichage du tableau toutes les 10 secondes
        setInterval(() => {
            this.displayTokensTable();
        }, 10000);
        
        // Rapport de test toutes les 60 secondes (moins fr√©quent)
        setInterval(() => {
            this.generateTestReport();
        }, 60000);
        
        // Mise √† jour des prix de r√©f√©rence toutes les 2 minutes
        setInterval(() => {
            this.fetchReferencePrices();
        }, 120000);
    }

    /**
     * G√©n√©rer un rapport de test
     */
    generateTestReport() {
        console.log('\nüìä RAPPORT DE TEST - CALCUL DE PRIX HELIUS');
        console.log('‚ïê'.repeat(50));
        console.log(`üìà Total mises √† jour    : ${this.testResults.totalUpdates}`);
        console.log(`üßÆ Calculs Helius       : ${this.testResults.heliusCalculated}`);
        console.log(`üîÑ Fallbacks DexScreener : ${this.testResults.dexScreenerFallbacks}`);
        
        if (this.testResults.heliusCalculated > 0) {
            const heliusRate = (this.testResults.heliusCalculated / this.testResults.totalUpdates * 100).toFixed(1);
            console.log(`‚ö° Taux calcul Helius   : ${heliusRate}%`);
        }
        
        // Analyse des variations
        if (this.testResults.priceVariations.length > 0) {
            const recentVariations = this.testResults.priceVariations.slice(-10);
            const avgVariation = recentVariations.reduce((sum, v) => sum + Math.abs(v.variation), 0) / recentVariations.length;
            
            console.log(`üìä Variation moy. (10 derni√®res): ¬±${avgVariation.toFixed(2)}%`);
            
            const lowVariations = recentVariations.filter(v => Math.abs(v.variation) < 1).length;
            const mediumVariations = recentVariations.filter(v => Math.abs(v.variation) >= 1 && Math.abs(v.variation) < 5).length;
            const highVariations = recentVariations.filter(v => Math.abs(v.variation) >= 5).length;
            
            console.log(`üü¢ Faibles variations (<1%): ${lowVariations}/10`);
            console.log(`üü° Moyennes variations (1-5%): ${mediumVariations}/10`);
            console.log(`üî¥ Fortes variations (>5%): ${highVariations}/10`);
        }
        
        console.log('‚ïê'.repeat(50));
    }

    /**
     * Test de comparaison d√©taill√©
     */
    async runDetailedComparison() {
        console.log('\nüîç TEST DE COMPARAISON D√âTAILL√â');
        console.log('-'.repeat(40));
        
        for (const mint of this.testTokens) {
            const symbol = this.heliusService.getTokenSymbol(mint) || mint.substring(0, 8);
            const heliusPrice = this.lastHeliusPrice.get(mint);
            const refPrice = this.referencePrice.get(mint);
            
            if (heliusPrice && refPrice) {
                const variation = ((heliusPrice - refPrice) / refPrice) * 100;
                const status = Math.abs(variation) < 1 ? '‚úÖ PR√âCIS' : 
                             Math.abs(variation) < 5 ? '‚ö†Ô∏è  MOYEN' : '‚ùå IMPR√âCIS';
                
                console.log(`${symbol}:`);
                console.log(`  Helius: $${heliusPrice.toFixed(8)}`);
                console.log(`  R√©f√©rence: $${refPrice.toFixed(8)}`);
                console.log(`  Variation: ${variation > 0 ? '+' : ''}${variation.toFixed(3)}%`);
                console.log(`  Statut: ${status}`);
                console.log('');
            }
        }
    }

    /**
     * Arr√™ter les tests
     */
    async stopTests() {
        console.log('\nüõë Arr√™t des tests...');
        
        // Rapport final
        this.generateFinalReport();
        
        // Arr√™ter le service
        await this.heliusService.stop();
        
        console.log('‚úÖ Tests termin√©s');
    }

    /**
     * Rapport final
     */
    generateFinalReport() {
        console.log('\nüìã RAPPORT FINAL DES TESTS');
        console.log('‚ïê'.repeat(60));
        
        console.log(`üî¢ Total updates: ${this.testResults.totalUpdates}`);
        console.log(`üßÆ Calculs Helius: ${this.testResults.heliusCalculated}`);
        console.log(`üîÑ Fallbacks: ${this.testResults.dexScreenerFallbacks}`);
        
        if (this.testResults.priceVariations.length > 0) {
            const allVariations = this.testResults.priceVariations.map(v => Math.abs(v.variation));
            const avgVariation = allVariations.reduce((a, b) => a + b, 0) / allVariations.length;
            const maxVariation = Math.max(...allVariations);
            const minVariation = Math.min(...allVariations);
            
            console.log('\nüìä ANALYSE DES VARIATIONS:');
            console.log(`   Moyenne: ¬±${avgVariation.toFixed(3)}%`);
            console.log(`   Minimum: ¬±${minVariation.toFixed(3)}%`);
            console.log(`   Maximum: ¬±${maxVariation.toFixed(3)}%`);
            
            const preciseCounts = allVariations.filter(v => v < 1).length;
            const precisionRate = (preciseCounts / allVariations.length * 100).toFixed(1);
            
            console.log(`\nüéØ PR√âCISION: ${precisionRate}% des calculs < 1% de variation`);
        }
        
        console.log('\nüî¨ VALIDATION DU SYST√àME:');
        if (this.testResults.heliusCalculated > this.testResults.dexScreenerFallbacks) {
            console.log('‚úÖ Le calcul Helius fonctionne correctement');
        } else {
            console.log('‚ö†Ô∏è  Trop de fallbacks - V√©rifier la logique de calcul');
        }
    }
}

// D√©marrer les tests
const tester = new HeliusPriceCalculationTester();

// Gestion des signaux d'arr√™t
process.on('SIGINT', () => {
    console.log('\nüõë Signal d\'arr√™t re√ßu...');
    tester.stopTests().then(() => process.exit(0));
});

process.on('SIGTERM', () => {
    console.log('\nüõë Signal de terminaison re√ßu...');
    tester.stopTests().then(() => process.exit(0));
});

// D√©marrer les tests
tester.startTests().catch(error => {
    console.error('‚ùå Erreur lors du d√©marrage des tests:', error);
    process.exit(1);
});

export default HeliusPriceCalculationTester; 