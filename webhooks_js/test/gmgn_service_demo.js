#!/usr/bin/env node

import GMGNPriceService from '../src/services/GMGNPriceService.js';

/**
 * üéØ D√âMONSTRATION SERVICE GMGN - TOKEN CHAT
 * 
 * Test du service de prix temps r√©el GMGN
 * avec le token "chat" en surveillance continue
 */

const CHAT_TOKEN = '5umKhqeUvXWhs1vusXkf6CbZLvHbDt3bHZGQez7vpump';

console.log('üéØ D√âMONSTRATION SERVICE GMGN - TOKEN CHAT');
console.log('‚ïê'.repeat(60));
console.log(`ü™ô Token surveill√©: ${CHAT_TOKEN}`);
console.log('üîÑ D√©marrage de la surveillance temps r√©el...\n');

// Cr√©er le service avec configuration personnalis√©e
const priceService = new GMGNPriceService({
    updateInterval: 15000, // Mise √† jour toutes les 15 secondes
    retryDelay: 3000,
    maxRetries: 3,
    timeout: 10000
});

// Statistiques
let updateCount = 0;
let errorCount = 0;
let startTime = Date.now();

/**
 * Gestionnaires d'√©v√©nements
 */
priceService.on('priceUpdate', (event) => {
    updateCount++;
    const { tokenAddress, priceData, priceChange, isNewData } = event;
    
    const time = new Date().toLocaleTimeString('fr-FR');
    
    if (isNewData) {
        console.log('\nüéâ PREMI√àRE R√âCUP√âRATION DU PRIX!');
        console.log('‚ïê'.repeat(50));
    } else {
        console.log('\nüìä MISE √Ä JOUR DU PRIX');
        console.log('‚îÄ'.repeat(30));
    }
    
    console.log(`üïí Heure: ${time}`);
    console.log(`ü™ô Token: ${priceData.symbol} (${priceData.name})`);
    console.log(`üíµ Prix actuel: $${priceData.price.toFixed(8)}`);
    
    if (priceChange !== null) {
        const changeIcon = priceChange >= 0 ? 'üìà' : 'üìâ';
        const changeColor = priceChange >= 0 ? '+' : '';
        console.log(`${changeIcon} Variation: ${changeColor}${priceChange.toFixed(4)}%`);
    }
    
    // Historique des prix
    console.log('\nüìà Historique des prix:');
    console.log(`  - 1 minute: $${priceData.priceHistory['1m']?.toFixed(8) || 'N/A'}`);
    console.log(`  - 5 minutes: $${priceData.priceHistory['5m']?.toFixed(8) || 'N/A'}`);
    console.log(`  - 1 heure: $${priceData.priceHistory['1h']?.toFixed(8) || 'N/A'}`);
    console.log(`  - 24 heures: $${priceData.priceHistory['24h']?.toFixed(8) || 'N/A'}`);
    
    // Variations sur diff√©rentes p√©riodes
    if (priceData.change1h !== undefined) {
        const icon1h = priceData.change1h >= 0 ? 'üìà' : 'üìâ';
        console.log(`${icon1h} Variation 1h: ${priceData.change1h >= 0 ? '+' : ''}${priceData.change1h.toFixed(2)}%`);
    }
    
    if (priceData.change24h !== undefined) {
        const icon24h = priceData.change24h >= 0 ? 'üìà' : 'üìâ';
        console.log(`${icon24h} Variation 24h: ${priceData.change24h >= 0 ? '+' : ''}${priceData.change24h.toFixed(2)}%`);
    }
    
    // Donn√©es de march√©
    console.log('\nüíπ Donn√©es de march√©:');
    console.log(`  - Volume 24h: $${priceData.volume24h?.toLocaleString() || 'N/A'}`);
    console.log(`  - Market Cap: $${priceData.marketCap?.toLocaleString() || 'N/A'}`);
    console.log(`  - Holders: ${priceData.holderCount?.toLocaleString() || 'N/A'}`);
    
    // Activit√© de trading
    if (priceData.swaps) {
        console.log('\nüîÑ Activit√© de trading:');
        console.log(`  - Swaps 5m: ${priceData.swaps['5m'] || 'N/A'}`);
        console.log(`  - Swaps 1h: ${priceData.swaps['1h'] || 'N/A'}`);
        console.log(`  - Swaps 24h: ${priceData.swaps['24h'] || 'N/A'}`);
    }
    
    console.log(`\nüìä Source: ${priceData.source}`);
    console.log(`üî¢ Mise √† jour #${updateCount}`);
});

priceService.on('error', (event) => {
    errorCount++;
    const { tokenAddress, error, timestamp } = event;
    
    console.log(`\n‚ùå ERREUR lors de la r√©cup√©ration du prix:`);
    console.log(`  Token: ${tokenAddress}`);
    console.log(`  Erreur: ${error}`);
    console.log(`  Heure: ${new Date(timestamp).toLocaleTimeString('fr-FR')}`);
    console.log(`  Total erreurs: ${errorCount}`);
});

priceService.on('monitoringStarted', (event) => {
    console.log(`‚úÖ Surveillance d√©marr√©e: ${event.tokenAddress}`);
    console.log(`‚è±Ô∏è Intervalle: ${event.interval/1000} secondes\n`);
});

priceService.on('monitoringStopped', (event) => {
    console.log(`üõë Surveillance arr√™t√©e: ${event.tokenAddress}`);
});

/**
 * Affichage p√©riodique des statistiques
 */
function showStats() {
    const stats = priceService.getStats();
    const runTime = ((Date.now() - startTime) / 1000).toFixed(0);
    
    console.log('\nüìä STATISTIQUES DE SESSION');
    console.log('‚ïê'.repeat(40));
    console.log(`‚è±Ô∏è Dur√©e: ${runTime}s`);
    console.log(`üìà Mises √† jour: ${updateCount}`);
    console.log(`‚ùå Erreurs: ${errorCount}`);
    console.log(`üéØ Tokens surveill√©s: ${stats.monitoredTokensCount}`);
    console.log(`üíæ Cache: ${stats.cacheSize} entr√©e(s)`);
    console.log(`üîÑ Service actif: ${stats.isRunning ? 'Oui' : 'Non'}`);
    
    if (stats.lastUpdate) {
        const lastUpdateTime = new Date(stats.lastUpdate).toLocaleTimeString('fr-FR');
        console.log(`üïí Derni√®re MAJ: ${lastUpdateTime}`);
    }
    
    // Calculer le taux de succ√®s
    const totalAttempts = updateCount + errorCount;
    if (totalAttempts > 0) {
        const successRate = ((updateCount / totalAttempts) * 100).toFixed(1);
        console.log(`‚úÖ Taux de succ√®s: ${successRate}%`);
    }
    
    console.log('‚ïê'.repeat(40));
}

/**
 * D√©marrage du test
 */
async function main() {
    try {
        // D√©marrer la surveillance
        priceService.startMonitoring(CHAT_TOKEN);
        
        // Afficher les stats toutes les minutes
        const statsInterval = setInterval(showStats, 60000);
        
        // Instructions
        console.log('üí° INSTRUCTIONS:');
        console.log('  - Appuyez sur Ctrl+C pour arr√™ter');
        console.log('  - Les prix sont mis √† jour toutes les 15 secondes');
        console.log('  - Les statistiques s\'affichent toutes les minutes');
        console.log('  - Comparez avec https://www.gmgn.cc/kline/sol/' + CHAT_TOKEN);
        
        // Gestion de l'arr√™t propre
        process.on('SIGINT', () => {
            console.log('\nüõë Arr√™t en cours...');
            
            clearInterval(statsInterval);
            priceService.stopAllMonitoring();
            
            setTimeout(() => {
                console.log('\nüìä R√âSUM√â FINAL:');
                showStats();
                
                // Afficher le dernier prix connu
                const lastPrice = priceService.getPrice(CHAT_TOKEN);
                if (lastPrice) {
                    console.log(`\nüí∞ DERNIER PRIX CONNU:`);
                    console.log(`  ${lastPrice.symbol}: $${lastPrice.price.toFixed(8)}`);
                    console.log(`  R√©cup√©r√© √†: ${new Date(lastPrice.timestamp).toLocaleString('fr-FR')}`);
                }
                
                console.log('\n‚úÖ Service arr√™t√©. Au revoir!');
                process.exit(0);
            }, 1000);
        });
        
    } catch (error) {
        console.error('‚ùå Erreur fatale:', error.message);
        process.exit(1);
    }
}

// D√©marrage
main(); 