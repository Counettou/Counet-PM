#!/usr/bin/env node

/**
 * üéØ SOLUTION ULTIME : PATCHRIGHT + COMPORTEMENT HUMAIN ULTRA-R√âALISTE
 * 
 * Combinaison de toutes les techniques les plus avanc√©es :
 * - Patchright (Playwright patch√©)
 * - Mode navigateur VISIBLE (non-headless) 
 * - Simulation de comportement humain ultra-r√©aliste
 * - D√©lais al√©atoires et mouvements de souris
 * - Rotation d'User-Agents et r√©solutions
 * - Gestion intelligente des challenges Cloudflare
 * 
 * üöÄ OBJECTIF: Solution d√©finitive anti-d√©tection
 */

import { chromium } from 'patchright';

const TARGET_TOKEN = '5umKhqeUvXWhs1vusXkf6CbZLvHbDt3bHZGQez7vpump';
const UPDATE_INTERVAL = 3000; // 3 secondes pour √™tre plus humain

// ‚≠ê IPRoyal proxy
const IPROYAL_HOSTNAME = 'geo.iproyal.com';
const IPROYAL_PORT = '12321';
const IPROYAL_USERNAME = 'j686absSWTWSkmcj';
const IPROYAL_PASSWORD = 'kjXBVH6xcLmWKew5';

// üé≠ Profils de navigateur ultra-r√©alistes
const BROWSER_PROFILES = [
    {
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        viewport: { width: 1920, height: 1080 },
        platform: 'macOS',
        locale: 'en-US'
    },
    {
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        viewport: { width: 1366, height: 768 },
        platform: 'Win32',
        locale: 'en-US'
    },
    {
        userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',
        viewport: { width: 1440, height: 900 },
        platform: 'macOS',
        locale: 'en-US'
    }
];

// Variables de suivi
let lastPrice = null;
let updateCount = 0;
let errorCount = 0;
let startTime = Date.now();
let browser = null;
let page = null;
let currentProfileIndex = 0;

console.log('üé≠ SOLUTION ULTIME : STEALTH MAXIMUM AVEC PATCHRIGHT');
console.log('‚ïê'.repeat(80));
console.log(`ü™ô Token: ${TARGET_TOKEN}`);
console.log(`‚è±Ô∏è Mise √† jour: toutes les ${UPDATE_INTERVAL/1000} secondes (d√©lai humain)`);
console.log(`üîó Source: GMGN.ai`);
console.log(`üåê Proxy: IPRoyal Premium`);
console.log(`üõ°Ô∏è Anti-d√©tection: Patchright + Comportement humain + Mode visible`);
console.log(`üé≠ Profils: ${BROWSER_PROFILES.length} profils de navigateur rotatifs`);
console.log('üöÄ Initialisation ultra-stealth...');

/**
 * üé≤ G√©n√©rer un d√©lai al√©atoire humain
 */
function humanDelay(min = 1000, max = 3000) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * üé≠ Obtenir le prochain profil de navigateur
 */
function getNextProfile() {
    const profile = BROWSER_PROFILES[currentProfileIndex];
    currentProfileIndex = (currentProfileIndex + 1) % BROWSER_PROFILES.length;
    return profile;
}

/**
 * üê≠ Simuler des mouvements de souris humains
 */
async function simulateHumanMouseMovement(page) {
    try {
        // Mouvements al√©atoires de souris
        for (let i = 0; i < 3; i++) {
            const x = Math.random() * 1200 + 100;
            const y = Math.random() * 600 + 100;
            await page.mouse.move(x, y, { 
                steps: Math.floor(Math.random() * 10) + 5 
            });
            await page.waitForTimeout(humanDelay(200, 800));
        }
        
        // Scroll al√©atoire
        await page.evaluate(() => {
            window.scrollBy(0, Math.random() * 200 - 100);
        });
        
        await page.waitForTimeout(humanDelay(500, 1500));
    } catch (error) {
        console.log(`‚ö†Ô∏è Erreur simulation souris: ${error.message}`);
    }
}

/**
 * üåê Initialiser le navigateur ultra-stealth
 */
async function initBrowser() {
    try {
        const profile = getNextProfile();
        console.log(`üé≠ Profil s√©lectionn√©: ${profile.platform} - ${profile.viewport.width}x${profile.viewport.height}`);
        
        browser = await chromium.launch({
            headless: false, // MODE VISIBLE pour √©viter la d√©tection headless
            proxy: {
                server: `http://${IPROYAL_HOSTNAME}:${IPROYAL_PORT}`,
                username: IPROYAL_USERNAME,
                password: IPROYAL_PASSWORD
            },
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--exclude-switches=enable-automation',
                '--disable-extensions-except=',
                '--disable-plugins-except=',
                '--start-maximized',
                '--disable-infobars',
                '--disable-notifications',
                '--disable-popup-blocking',
                '--disable-save-password-bubble',
                '--disable-translate',
                '--disable-features=VizDisplayCompositor,TranslateUI',
                '--no-first-run',
                '--no-default-browser-check',
                `--user-agent=${profile.userAgent}`
            ]
        });

        // Contexte avec profil ultra-r√©aliste
        const context = await browser.newContext({
            userAgent: profile.userAgent,
            viewport: profile.viewport,
            deviceScaleFactor: 1,
            isMobile: false,
            hasTouch: false,
            locale: profile.locale,
            timezoneId: 'America/New_York',
            colorScheme: 'light',
            permissions: ['geolocation', 'notifications'],
            geolocation: { latitude: 40.7128, longitude: -74.0060 }, // NYC
            extraHTTPHeaders: {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept-Language': 'en-US,en;q=0.9',
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache',
                'Sec-CH-UA': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                'Sec-CH-UA-Mobile': '?0',
                'Sec-CH-UA-Platform': `"${profile.platform}"`,
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-User': '?1',
                'Upgrade-Insecure-Requests': '1',
                'DNT': '1'
            }
        });

        page = await context.newPage();
        
        // Scripts ultra-avanc√©s pour masquer TOUTE trace d'automatisation
        await page.addInitScript(() => {
            // Supprimer les traces de webdriver
            delete navigator.__proto__.webdriver;
            delete navigator.webdriver;
            
            // Red√©finir toutes les propri√©t√©s suspectes
            Object.defineProperties(navigator, {
                webdriver: { get: () => undefined },
                plugins: { get: () => Array.from({ length: 5 }, (_, i) => ({ name: `Plugin${i}` })) },
                languages: { get: () => ['en-US', 'en'] },
                platform: { get: () => window.chrome ? 'Win32' : 'MacIntel' },
                hardwareConcurrency: { get: () => 8 },
                deviceMemory: { get: () => 8 },
                maxTouchPoints: { get: () => 0 }
            });
            
            // Supprimer console.debug et autres traces
            console.debug = console.info = () => {};
            
            // Override de window.chrome
            if (!window.chrome) {
                window.chrome = {
                    runtime: {},
                    loadTimes: () => ({
                        commitLoadTime: Date.now() / 1000 - Math.random() * 1000,
                        finishDocumentLoadTime: Date.now() / 1000 - Math.random() * 500,
                        startLoadTime: Date.now() / 1000 - Math.random() * 1500
                    }),
                    csi: () => ({ pageT: Date.now() - Math.random() * 1000 })
                };
            }
            
            // Masquer les propri√©t√©s Playwright
            const originalGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            Object.getOwnPropertyDescriptor = function(obj, prop) {
                if (prop === 'webdriver' || prop.includes('playwright') || prop.includes('__playwright')) {
                    return undefined;
                }
                return originalGetOwnPropertyDescriptor.apply(this, arguments);
            };
            
            // Override permissions API
            const originalQuery = navigator.permissions.query;
            navigator.permissions.query = function(params) {
                if (params.name === 'notifications') {
                    return Promise.resolve({ state: 'default' });
                }
                return originalQuery.apply(this, arguments);
            };
        });

        console.log('‚úÖ Navigateur ultra-stealth initialis√© !');
        console.log('üé≠ Mode VISIBLE activ√© pour √©viter la d√©tection headless');
        console.log('üõ°Ô∏è Scripts anti-d√©tection ultra-avanc√©s inject√©s');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erreur initialisation:', error.message);
        return false;
    }
}

/**
 * üåê M√©thode ultra-stealth pour r√©cup√©rer les donn√©es
 */
async function fetchTokenDataUltraStealth() {
    try {
        console.log(`üîç [UltraStealth] Navigation humaine vers GMGN...`);
        
        // √âtape 1: Aller sur la page principale pour √©tablir une session
        await page.goto('https://gmgn.ai', { 
            waitUntil: 'networkidle',
            timeout: 30000 
        });
        
        await page.waitForTimeout(humanDelay(2000, 4000));
        
        // Simuler un comportement humain sur la page principale
        await simulateHumanMouseMovement(page);
        
        // √âtape 2: V√©rifier s'il y a un challenge Cloudflare
        let title = await page.title();
        let content = await page.content();
        
        if (title.includes('Just a moment') || content.includes('cf-challenge')) {
            console.log('üõ°Ô∏è Challenge Cloudflare d√©tect√©, r√©solution automatique...');
            
            // Attendre et simuler un comportement humain pendant le challenge
            let attempts = 0;
            while ((title.includes('Just a moment') || content.includes('cf-challenge')) && attempts < 10) {
                await page.waitForTimeout(humanDelay(3000, 6000));
                await simulateHumanMouseMovement(page);
                title = await page.title();
                content = await page.content();
                attempts++;
                console.log(`üîÑ Tentative ${attempts}/10 de r√©solution du challenge...`);
            }
        }
        
        console.log('‚úÖ Page principale charg√©e, navigation vers API...');
        
        // √âtape 3: Naviguer vers l'endpoint API avec d√©lai humain
        await page.waitForTimeout(humanDelay(1000, 3000));
        
        const apiUrl = `https://gmgn.ai/defi/quotation/v1/tokens/sol/${TARGET_TOKEN}`;
        const response = await page.goto(apiUrl, { 
            waitUntil: 'networkidle',
            timeout: 30000 
        });
        
        if (response.status() === 403) {
            throw new Error(`HTTP 403 - Challenge Cloudflare non r√©solu`);
        }
        
        if (response.status() !== 200) {
            throw new Error(`HTTP ${response.status()}`);
        }
        
        // √âtape 4: Extraire les donn√©es JSON avec simulation humaine
        await simulateHumanMouseMovement(page);
        
        const jsonData = await page.evaluate(() => {
            try {
                const bodyText = document.body.innerText || document.body.textContent;
                return JSON.parse(bodyText);
            } catch (e) {
                return null;
            }
        });
        
        if (!jsonData || typeof jsonData.price === 'undefined') {
            throw new Error('Donn√©es JSON non disponibles');
        }
        
        console.log(`‚úÖ [UltraStealth] Prix r√©cup√©r√©: ${jsonData.price}`);
        
        return {
            ...jsonData,
            timestamp: Date.now(),
            method: 'UltraStealth + Navigation humaine'
        };
        
    } catch (error) {
        throw new Error(`UltraStealth: ${error.message}`);
    }
}

/**
 * Formater une valeur
 */
function formatValue(value, type = 'default') {
    if (value === null || value === undefined) return 'N/A';
    
    switch (type) {
        case 'price':
            return `$${Number(value).toFixed(8)}`;
        case 'marketcap':
        case 'volume':
            if (value >= 1e9) return `$${(value / 1e9).toFixed(2)}B`;
            if (value >= 1e6) return `$${(value / 1e6).toFixed(2)}M`;
            if (value >= 1e3) return `$${(value / 1e3).toFixed(2)}K`;
            return `$${Number(value).toFixed(2)}`;
        default:
            return String(value);
    }
}

/**
 * Afficher les donn√©es
 */
function displayTokenData(tokenData) {
    updateCount++;
    const time = new Date().toLocaleTimeString('fr-FR', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit', 
        second: '2-digit' 
    });
    
    const price = tokenData.price;
    let changeIcon = '‚ö™';
    let priceChangeInfo = '';
    
    if (lastPrice !== null) {
        const change = price - lastPrice;
        const changePercent = ((change / lastPrice) * 100);
        
        if (Math.abs(changePercent) > 0.00001) {
            changeIcon = change >= 0 ? 'üü¢' : 'üî¥';
            const changeStr = change >= 0 ? `+${change.toFixed(10)}` : change.toFixed(10);
            const percentStr = change >= 0 ? `+${changePercent.toFixed(4)}%` : `${changePercent.toFixed(4)}%`;
            priceChangeInfo = ` (${changeStr} | ${percentStr})`;
        }
    }
    
    console.log(`${changeIcon} [${time}] ${formatValue(price, 'price')}${priceChangeInfo} [${tokenData.method}]`);
    
    if (updateCount % 5 === 0) {
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        console.log('‚îÇ üé≠ CONTOURNEMENT R√âUSSI - CLOUDFLARE BATTU !                              ‚îÇ');
        console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
        console.log(`‚îÇ üí∞ Prix: ${formatValue(price, 'price').padEnd(69)} ‚îÇ`);
        console.log(`‚îÇ üõ°Ô∏è M√©thode: ${(tokenData.method).padEnd(60)} ‚îÇ`);
        console.log(`‚îÇ üåê Proxy: IPRoyal Premium + UltraStealth                                  ‚îÇ`);
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    }
    
    lastPrice = price;
}

/**
 * Afficher les statistiques
 */
function showStats() {
    const runTime = Math.max(1, Math.floor((Date.now() - startTime) / 1000));
    const successRate = updateCount > 0 ? ((updateCount / (updateCount + errorCount)) * 100).toFixed(1) : '0';
    const avgReqPerSec = updateCount > 0 ? (updateCount / runTime).toFixed(2) : '0';
    
    console.log(`üìä [Stats UltraStealth] Dur√©e: ${runTime}s | Updates: ${updateCount} | Erreurs: ${errorCount} | Succ√®s: ${successRate}%`);
    console.log(`‚ö° [Perf UltraStealth] Vitesse: ${avgReqPerSec} req/sec (d√©lais humains)`);
    if (lastPrice) {
        console.log(`üí∞ [Prix actuel] ${formatValue(lastPrice, 'price')}`);
    }
    console.log('');
}

/**
 * Boucle principale avec d√©lais humains
 */
async function dataLoop() {
    try {
        const tokenData = await fetchTokenDataUltraStealth();
        displayTokenData(tokenData);
        
    } catch (error) {
        errorCount++;
        const time = new Date().toLocaleTimeString('fr-FR', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
        });
        console.log(`‚ùå [${time}] Erreur UltraStealth: ${error.message}`);
        
        // Red√©marrage intelligent
        if (errorCount % 2 === 0) {
            console.log(`üîÑ Changement de profil navigateur apr√®s ${errorCount} erreurs...`);
            await cleanupBrowser();
            const reInitialized = await initBrowser();
            if (reInitialized && page) {
                await page.waitForTimeout(humanDelay(2000, 5000));
            } else if (!reInitialized) {
                console.error('‚ùå √âchec de la r√©initialisation du navigateur apr√®s erreurs. Arr√™t de la tentative actuelle.');
                await new Promise(resolve => setTimeout(resolve, 10000));
            }
        }
    }
}

/**
 * Nettoyage du navigateur
 */
async function cleanupBrowser() {
    try {
        if (page) {
            await page.close();
            page = null;
        }
        if (browser) {
            await browser.close();
            browser = null;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è Erreur nettoyage: ${error.message}`);
    }
}

/**
 * D√©marrage principal
 */
async function start() {
    const browserInitialized = await initBrowser();
    
    if (!browserInitialized) {
        console.error('‚ùå Impossible d\'initialiser le navigateur UltraStealth');
        process.exit(1);
    }
    
    console.log('‚úÖ UltraStealth configur√© avec IPRoyal');
    console.log('üé≠ Mode VISIBLE + Comportement humain + D√©lais r√©alistes');
    
    // Premier appel avec d√©lai
    await page.waitForTimeout(humanDelay(2000, 4000));
    await dataLoop();
    
    // Puis avec des intervalles humains variables
    let interval;
    function scheduleNext() {
        const delay = humanDelay(UPDATE_INTERVAL, UPDATE_INTERVAL + 2000);
        interval = setTimeout(async () => {
            await dataLoop();
            scheduleNext();
        }, delay);
    }
    
    scheduleNext();
    
    // Stats toutes les 60 secondes
    const statsInterval = setInterval(showStats, 60000);
    
    // Gestion Ctrl+C
    process.on('SIGINT', async () => {
        console.log('üõë Arr√™t UltraStealth...');
        
        clearTimeout(interval);
        clearInterval(statsInterval);
        
        await cleanupBrowser();
        
        const runTime = Math.max(1, Math.floor((Date.now() - startTime) / 1000));
        console.log('üìä R√âSUM√â FINAL (ULTRASTEALTH):');
        console.log(`  ‚è±Ô∏è Dur√©e totale: ${runTime} secondes`);
        console.log(`  üìà Mises √† jour r√©ussies: ${updateCount}`);
        console.log(`  ‚ùå Erreurs: ${errorCount}`);
        
        if (updateCount > 0) {
            const successRate = ((updateCount / (updateCount + errorCount)) * 100).toFixed(1);
            console.log(`  ‚úÖ Taux de succ√®s: ${successRate}%`);
        }
        
        if (lastPrice) {
            console.log(`  üí∞ Dernier prix: ${formatValue(lastPrice, 'price')}`);
        }
        
        console.log('‚úÖ UltraStealth arr√™t√© !');
        process.exit(0);
    });
    
    console.log('üí° Appuyez sur Ctrl+C pour arr√™ter');
    console.log('üé≠ CLOUDFLARE VA √äTRE BATTU ! Mode UltraStealth actif !');
}

// D√©marrage
start().catch(error => {
    console.error('‚ùå Erreur fatale UltraStealth:', error.message);
    process.exit(1);
}); 