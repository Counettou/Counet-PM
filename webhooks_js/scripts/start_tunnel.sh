#!/bin/bash

echo "üöÄ SOLANA POSITION MANAGER - TUNNEL CLOUDFLARE PERMANENT"
echo "========================================================"

# V√©rifier les pr√©requis
if [ ! -f ".env" ]; then
    echo "‚ùå Fichier .env manquant"
    echo "üí° Cr√©ez un fichier .env avec : HELIUS_API_KEY=votre_cle_api"
    exit 1
fi

if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js non install√©"
    echo "üí° Installez Node.js : https://nodejs.org"
    exit 1
fi

if ! command -v cloudflared &> /dev/null; then
    echo "‚ùå cloudflared non install√©"
    echo "üí° Installez cloudflared : https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation/"
    exit 1
fi

if [ ! -f "config/cloudflared_config.yml" ]; then
    echo "‚ùå Fichier config/cloudflared_config.yml manquant"
    echo "üí° Le fichier de configuration du tunnel est requis"
    exit 1
fi

echo "‚úÖ Pr√©requis OK"

# Variables globales
WEBSOCKET_PID=""
TUNNEL_PID=""
TUNNEL_ID="0af91ac9-5f76-49c1-893e-acdb55bc223e"

# Fonction de nettoyage
cleanup() {
    echo ""
    echo "üßπ Arr√™t du syst√®me complet..."
    
    # Arr√™ter le serveur WebSocket
    if [ ! -z "$WEBSOCKET_PID" ]; then
        kill $WEBSOCKET_PID 2>/dev/null
        echo "‚úÖ Serveur WebSocket arr√™t√©"
    fi
    
    # Arr√™ter le tunnel Cloudflare
    if [ ! -z "$TUNNEL_PID" ]; then
        kill $TUNNEL_PID 2>/dev/null
        echo "‚úÖ Tunnel Cloudflare arr√™t√©"
    fi
    
    # Arr√™ter tous les processus li√©s
    pkill -f "scripts/start_helius_simple.js" 2>/dev/null
    pkill -f "cloudflared" 2>/dev/null
    
    echo "‚úÖ Syst√®me arr√™t√© proprement"
    exit 0
}

# G√©rer Ctrl+C
trap cleanup SIGINT SIGTERM

# Fonction pour d√©marrer le serveur WebSocket
start_websocket_server() {
    echo "üåê D√©marrage du serveur WebSocket..."
    
    # Arr√™ter l'ancien serveur s'il existe
    pkill -f "scripts/start_helius_simple.js" 2>/dev/null || true
    
    # D√©marrer le nouveau serveur en arri√®re-plan avec le script adapt√©
    node scripts/start_helius_simple.js &
    WEBSOCKET_PID=$!
    
    # Attendre que le serveur d√©marre (plus de temps pour l'initialisation Helius)
    echo "‚è≥ Attente de l'initialisation compl√®te (15s)..."
    sleep 15
    
    # V√©rification progressive du d√©marrage
    echo "üîç V√©rification du d√©marrage du serveur..."
    local retries=0
    local max_retries=5
    
    while [ $retries -lt $max_retries ]; do
        if curl -s http://localhost:8081/api/health > /dev/null 2>&1; then
            break
        fi
        retries=$((retries + 1))
        echo "‚è≥ Tentative $retries/$max_retries - Attente de 3s..."
        sleep 3
    done
    
    # V√©rifier que le serveur fonctionne (sur le port du script simplifi√©)
    if curl -s http://localhost:8081/api/health > /dev/null 2>&1; then
        echo "‚úÖ Serveur WebSocket d√©marr√© (PID: $WEBSOCKET_PID)"
        echo "üåê Interface Web: http://localhost:8081"
        echo "üîå WebSocket: ws://localhost:8081"
        echo "üì° API REST: http://localhost:8081/api/positions"
        return 0
    else
        echo "‚ùå Erreur d√©marrage serveur WebSocket"
        return 1
    fi
}

# Fonction pour d√©marrer le tunnel Cloudflare
start_cloudflare_tunnel() {
    echo "üåâ D√©marrage du tunnel Cloudflare..."
    
    # Arr√™ter l'ancien tunnel s'il existe
    pkill -f "cloudflared" 2>/dev/null || true
    
    # D√©marrer le tunnel en arri√®re-plan
    cloudflared tunnel --config config/cloudflared_config.yml run helius-tunnel &
    TUNNEL_PID=$!
    
    # Attendre que le tunnel d√©marre
    sleep 5
    
    echo "‚úÖ Tunnel Cloudflare d√©marr√© (PID: $TUNNEL_PID)"
    echo "üåê URL publique: https://$TUNNEL_ID.cfargotunnel.com"
    echo "üì° Webhook URL: https://$TUNNEL_ID.cfargotunnel.com/helius-webhook"
    
    return 0
}

# Fonction pour afficher le statut du syst√®me
show_status() {
    echo ""
    echo "üìä STATUT DU SYST√àME"
    echo "===================="
    
    # V√©rifier le serveur WebSocket
    if curl -s http://localhost:8081/api/health > /dev/null 2>&1; then
        echo "‚úÖ Serveur WebSocket: Op√©rationnel"
        
        # R√©cup√©rer les statistiques
        local stats=$(curl -s http://localhost:8081/api/health 2>/dev/null)
        if [ ! -z "$stats" ]; then
            echo "   üìä $(echo "$stats" | grep -o '\"positions\":[0-9]*' | cut -d':' -f2) positions"
            echo "   üìù $(echo "$stats" | grep -o '\"transactions\":[0-9]*' | cut -d':' -f2) transactions"
            echo "   üë• $(echo "$stats" | grep -o '\"clients\":[0-9]*' | cut -d':' -f2) clients connect√©s"
        fi
    else
        echo "‚ùå Serveur WebSocket: Non accessible"
    fi
    
    # V√©rifier le tunnel
    if ps -p $TUNNEL_PID > /dev/null 2>&1; then
        echo "‚úÖ Tunnel Cloudflare: Op√©rationnel"
    else
        echo "‚ùå Tunnel Cloudflare: Non accessible"
    fi
    
    echo "üéØ Wallet surveill√©: CaBTVKEDpwkQLguTfSBRX9haxf4cW4KUexcMsvo8RTaB"
    echo "üåê URL publique: https://$TUNNEL_ID.cfargotunnel.com"
}

# D√âMARRAGE PRINCIPAL
echo ""
echo "üéØ PHASE 1: D√©marrage du Serveur Local"
echo "======================================"

if ! start_websocket_server; then
    echo "‚ùå √âchec d√©marrage serveur"
    cleanup
fi

echo ""
echo "üéØ PHASE 2: D√©marrage du Tunnel Cloudflare"
echo "=========================================="

if ! start_cloudflare_tunnel; then
    echo "‚ùå √âchec d√©marrage tunnel"
    cleanup
fi

echo ""
echo "üéâ SYST√àME TUNNEL CLOUDFLARE OP√âRATIONNEL !"
echo "============================================"

show_status

echo ""
echo "‚ú® FONCTIONNALIT√âS ACTIVES:"
echo "- üì° R√©ception directe des webhooks Helius"
echo "- üíæ Sauvegarde automatique des transactions"
echo "- üìä Suivi des positions en temps r√©el"
echo "- üåê Interface web interactive"
echo "- üîå API WebSocket pour applications"
echo "- üåâ Tunnel Cloudflare permanent"
echo ""
echo "üåê ACC√àS:"
echo "- Interface Web: http://localhost:8081"
echo "- Interface Web Publique: https://$TUNNEL_ID.cfargotunnel.com"
echo "- API REST: http://localhost:8081/api/positions"
echo "- WebSocket: ws://localhost:8081"
echo ""
echo "üì° WEBHOOK HELIUS:"
echo "- URL √† configurer: https://$TUNNEL_ID.cfargotunnel.com/helius-webhook"
echo ""
echo "üìÅ DONN√âES SAUV√âES:"
echo "- Positions: ./positions/"
echo "- Transactions: ./received_transactions/"
echo ""
echo "üõë Ctrl+C pour arr√™ter tout le syst√®me"
echo ""

# Surveillance continue
while true; do
    sleep 30
    
    # V√©rifier que le serveur fonctionne toujours
    if ! curl -s http://localhost:8081/api/health > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  [$(date)] Serveur WebSocket non accessible - red√©marrage..."
        start_websocket_server
    fi
    
    # V√©rifier que le tunnel fonctionne toujours
    if ! ps -p $TUNNEL_PID > /dev/null 2>&1; then
        echo "‚ö†Ô∏è  [$(date)] Tunnel Cloudflare non accessible - red√©marrage..."
        start_cloudflare_tunnel
    fi
    
    # Afficher un statut p√©riodique (toutes les 5 minutes)
    if [ $(($(date +%s) % 300)) -eq 0 ]; then
        echo "üìä [$(date)] Syst√®me actif - Webhook: https://$TUNNEL_ID.cfargotunnel.com/helius-webhook"
    fi
done 